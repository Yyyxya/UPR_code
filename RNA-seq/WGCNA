##step0载入R包
library(WGCNA)
library(tinyarray)

#step1.input data
load('Step3.remove.batch.limma.combat.11284.genes.Rdata')
exp<-readRDS('./exp_tpm_mRNA_lncRNA_WGCNA.rds')
exp_tpm_mRNA<-exp$mRNA
limma.batch<-as.data.frame(exp_tpm_mRNA)
#取前5000个基因
datExpr0 = t(limma.batch[order(apply(limma.batch, 1, mad), decreasing = T)[1:5000],])
#datExpr0 = t(exp[order(apply(exp, 1, var), decreasing = T)[1:round(0.25*nrow(exp))],])
datExpr0[1:4,1:4]

#step2.sample filter
gsg = goodSamplesGenes(datExpr0, verbose = 3)
gsg$allOK
#返回TRUE则继续
#返回FALSE
if (!gsg$allOK){
  # 把含有缺失值的基因或样本打印出来
  if (sum(!gsg$goodGenes)>0)
    printFlush(paste("Removing genes:", paste(names(datExpr0)[!gsg$goodGenes], collapse = ", ")));
  if (sum(!gsg$goodSamples)>0)
    printFlush(paste("Removing samples:", paste(rownames(datExpr0)[!gsg$goodSamples], collapse = ", ")));
  # 去掉那些缺失值
  datExpr0 = datExpr0[gsg$goodSamples, gsg$goodGenes]
}

sampleTree = hclust(dist(datExpr0), method = "average")

png(file = "2.sampleClustering.png", width = 2000, height = 2000,res = 300)
par(cex = 0.6)
par(mar = c(0,4,2,0))
plot(sampleTree, main = "Sample clustering to detect outliers", sub="", xlab="", cex.lab = 1.5,
     cex.axis = 1.5, cex.main = 2)
dev.off()
##没有异常样本，不需要去除

#step3.1 软阈值的筛选
powers = c(1:10, seq(from = 12, to=30, by=2))
sft = pickSoftThreshold(datExpr, powerVector = powers, verbose = 5)
sft$powerEstimate
cex1 = 0.9
png(file = "4.Soft threshold.png", width = 2000, height = 1500,res = 300)
par(mfrow = c(1,2))
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
     xlab="Soft Threshold (power)",
     ylab="Scale Free Topology Model Fit,signed R^2",type="n",
     main = paste("Scale independence"))
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
     labels=powers,cex=cex1,col="red")
abline(h=cex1,col="red")
plot(sft$fitIndices[,1], sft$fitIndices[,5],
     xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",
     main = paste("Mean connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1,col="red")
dev.off()

#step3.2 一步构建网络
net = blockwiseModules(datExpr, power = 12,
                       TOMType = "unsigned", 
                       minModuleSize = 30, 
                       reassignThreshold = 0, 
                       mergeCutHeight = 0.25,
                       deepSplit = 2 ,
                       numericLabels = TRUE,
                       pamRespectsDendro = FALSE,
                       saveTOMs = TRUE,
                       saveTOMFileBase = "testTOM",
                       verbose = 3)
png(file = "5.DendroAndColors.png", width = 2000, height = 1200,res = 300)
plotDendroAndColors(net$dendrograms[[1]], mergedColors[net$blockGenes[[1]]],
                    "Module colors",
                    dendroLabels = FALSE, hang = 0.03,
                    addGuide = TRUE, guideHang = 0.05)
dev.off()

#step.3.3 保存每个模块对应的基因
moduleLabels = net$colors
moduleColors = labels2colors(net$colors)
MEs = net$MEs
geneTree = net$dendrograms[[1]]
gm = data.frame(net$colors)
gm$color = moduleColors
head(gm)
genes = split(rownames(gm),gm$color)
save(genes,file = "genes.Rdata")

#step3.4 模块与表型的相关性
nGenes = ncol(datExpr)
nSamples = nrow(datExpr)
MEs0 = moduleEigengenes(datExpr, moduleColors)$eigengenes
MEs = orderMEs(MEs0)
library(openxlsx)
datTraits<-read.xlsx('../pd/meta.data.xlsx',sheet = 6)
rownames(datTraits)<-datTraits$GSM_ID
datTraits<-datTraits[colnames(exp_tpm_mRNA),]
pd_1<-as.data.frame(model.matrix(~Condition -1,datTraits))
pd<-as.data.frame(t(exp_geneset))[,c(1:4,6:9)]
pd_2<-cbind(pd_1,pd_4)
pd_3<-as.data.frame(model.matrix(~Lineage -1,datTraits))
pd_4<-as.data.frame(model.matrix(~Treatment.type -1,datTraits))


table(rownames(pd_3)==rownames(pd_1))
colnames(pd_2)<-c('Basal','stress','DMSO','GD','GN','Hypoxia',
                  'Normoxia','TG','TM')
pd_2<-pd_2[rownames(datExpr),]
moduleTraitCor = cor(MEs, pd_2, use = "p")
moduleTraitPvalue = corPvalueStudent(moduleTraitCor, nSamples)
#热图
png(file = "6.labeledHeatmap.png", width = 2000, height = 2000,res = 300)
# 设置热图上的文字（两行数字：第一行是模块与各种表型的相关系数；
# 第二行是p值）
# signif 取有效数字
textMatrix = paste(signif(moduleTraitCor, 2), "\n(",
                   signif(moduleTraitPvalue, 1), ")", sep = "")
dim(textMatrix) = dim(moduleTraitCor)
par(mar = c(6, 8.5, 3, 3))
# 然后对moduleTraitCor画热图
labeledHeatmap(Matrix = moduleTraitCor,
               xLabels = names(pd_2),
               yLabels = names(MEs),
               ySymbols = names(MEs),
               colorLabels = FALSE,
               colors = blueWhiteRed (50),
               textMatrix = textMatrix,
               setStdMargins = FALSE,
               cex.text = 0.5,
               zlim = c(-1,1),
               main = paste("Module-trait relationships"))

dev.off()


##GS代表模块里的每个基因和所在模块之间的相关性
#MM代表每个基因和所在模块之间的相关性
#表示是否与模块的趋势抑制
modNames<-substring(names(MEs),3)
names(MEs)
geneModuleMembership = as.data.frame(cor(datExpr, MEs, use = "p"))
MMPvalue = as.data.frame(corPvalueStudent(as.matrix(geneModuleMembership), nSamples))
names(geneModuleMembership) = paste("MM", modNames, sep="")
names(MMPvalue) = paste("p.MM", modNames, sep="")
i = 2
#module = "pink"
module = "blue"
assign(colnames(pd_2)[i],pd_2[i])
instrait = eval(parse(text = colnames(pd_2)[i]))
geneTraitSignificance = as.data.frame(cor(datExpr, instrait, use = "p"))
GSPvalue = as.data.frame(corPvalueStudent(as.matrix(geneTraitSignificance), nSamples))
names(geneTraitSignificance) = paste("GS.", names(instrait), sep="")
names(GSPvalue) = paste("p.GS.", names(instrait), sep="")
png(file = paste0("7.MM-GS-scatterplot.png"), width = 2000, height = 2000,res = 300)
column = match(module, modNames) #找到目标模块所在列
moduleGenes = moduleColors==module #找到模块基因所在行
par(mfrow = c(1,1))
verboseScatterplot(abs(geneModuleMembership[moduleGenes, column]),
                   abs(geneTraitSignificance[moduleGenes, 1]),
                   xlab = paste("Module Membership in", module, "module"),
                   ylab = "Gene significance",
                   main = paste("Module membership vs. gene significance\n"),
                   cex.main = 1.2, cex.lab = 1.2, cex.axis = 1.2, col = module)+
  abline(v = 0.7, lty = "dashed", col = "red")+
  abline(h = 0.4, lty = "dashed", col = "red")
dev.off()

##选择模块相关性>0.7以及基因性状相关性>0.4的基因
library(dplyr)
gene_pd<-filter(geneTraitSignificance,
                geneTraitSignificance$GS.ConditionStress>=0.4)
gene_pd$gene<-rownames(gene_pd)
gene_md<-filter(geneModuleMembership,
                geneModuleMembership$MMblue>=0.7)
length(intersect(rownames(gene_pd),rownames(gene_md)))
WGCNA_Blue<-as.data.frame(intersect(rownames(gene_pd),rownames(gene_md)))
WGCNA_Blue
write.xlsx(WGCNA_Blue,'./gene_blue_filter.xlsx')
