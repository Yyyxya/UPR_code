for (i in 1:nrow(sce.all@meta.data)) {
  rowname <- rownames(sce.all@meta.data)[i]
  index <- which(rownames(sce_l@meta.data) == rowname)
  sce_l@meta.data$celltype[index] <- sce.all@meta.data$celltype[i]
}
table(sce_l@meta.data$celltype)

##细胞间通讯分析
data.input =sce_l@assays$RNA@data
meta.data = sce_l@meta.data
meta.data = meta.data[!is.na(meta.data$celltype),]
data.input = data.input[,row.names(meta.data)]
meta.data$celltype = factor(meta.data$celltype,
                            levels =unique(sce_l$celltype))


library(CellChat)
cellchat_l <- createCellChat(object = data.input, 
                             meta = meta.data, 
                             group.by = "celltype")

levels(cellchat_l@idents)
groupSize <- as.numeric(table(cellchat_l@idents))

#step2 加载cellchatDB数据库

### 1.4 加载CellChat受配体数据库
CellChatDB <- CellChatDB.human # use CellChatDB.mouse if running on mouse data
showDatabaseCategory(CellChatDB)
# Show the structure of the database
dplyr::glimpse(CellChatDB$interaction)
# use a subset of CellChatDB for cell-cell communication analysis
#CellChatDB.use <- subsetDB(CellChatDB, search = "Secreted Signaling") # use Secreted Signaling
CellChatDB.use <- CellChatDB # simply use the default CellChatDB
cellchat_l@DB <- CellChatDB.use



#step3对表达数据进行预处理

### 1.5 对表达数据进行预处理，用于细胞间通讯分析
# subset the expression data of signaling genes for saving computation cost
cellchat_l <- subsetData(object = cellchat_l) # This step is necessary even if using the whole database
future::plan("multisession", workers = 1) # do parallel

cellchat_l<- identifyOverExpressedGenes(cellchat_l)
cellchat_l<- identifyOverExpressedInteractions(cellchat_l)


#step4 计算通讯概率，推断细胞通讯网络
cellchat_l <- computeCommunProb(cellchat_l,population.size = F)
# Filter out the cell-cell communication if there are only few number of cells in certain cell groups
cellchat_l<- filterCommunication(cellchat_l, min.cells = 10)

#step5 提取预测的细胞通讯网络为data frame
#获取所有的配受体对以及其通讯概率
df.net <- subsetCommunication(cellchat_l)
head(df.net)

#以通路为单位提取通讯信息
df.pathway = subsetCommunication(cellchat_l,slot.name = "netP")
head(df.pathway)
df.net <- subsetCommunication(cellchat_l, sources.use = c(1,2),
                              targets.use = c(4,5)) 
#gives the inferred cell-cell communications sending from cell groups 1 and 2 to cell groups 4 and 5.
head(df.net)
levels(cellchat_l@idents)

df.net <- subsetCommunication(cellchat_l, sources.use = c(1), targets.use = c(2,3))
head(df.net)

df.net <- subsetCommunication(cellchat_l, signaling = c("MIF", "MHC-I"))
#gives the inferred cell-cell communications mediated by signaling MIF and MHC-I.
head(df.net)


##step6. 在信号通路水平推断细胞通讯
cellchat_l<- computeCommunProbPathway(cellchat_l)




#step7 计算加和的cell-cell通讯网络
cellchat_l<- aggregateNet(cellchat_l)

groupSize <- as.numeric(table(cellchat_l@idents))
par(mfrow = c(1,2), xpd=TRUE)
netVisual_circle(cellchat_l@net$count, vertex.weight = groupSize,
                 weight.scale = T, label.edge= F,
                 title.name = "Number of interactions")
netVisual_circle(cellchat_l@net$weight, vertex.weight = groupSize,
                 weight.scale = T, label.edge= F,
                 title.name = "Interaction weights/strength")

#控制参数edge.weight.max，以便我们可以比较不同网络之间的边权值
mat <- cellchat_l@net$weight
par(mfrow = c(3,3), xpd=TRUE)
for (i in 1:nrow(mat)) {
  mat2 <- matrix(0, nrow = nrow(mat), ncol = ncol(mat), dimnames = dimnames(mat))
  mat2[i, ] <- mat[i, ]
  netVisual_circle(mat2, vertex.weight = groupSize,
                   weight.scale = T, edge.weight.max = max(mat),
                   title.name = rownames(mat)[i])
}
head(mat)


#Step8. 使用层次图（Hierarchical plot），圆圈图（Circle plot）
#或和弦图（Chord diagram）可视化每个信号通路

pathways.show <- c("MIF") 
# Hierarchy plot 层次图
# Here we define `vertex.receive` so that the left portion of the hierarchy plot shows signaling to fibroblast and the right portion shows signaling to immune cells 
vertex.receiver = c(1,2,3,4) # a numeric vector. 
netVisual_aggregate(cellchat_l, signaling = pathways.show,  vertex.receiver = vertex.receiver, layout = "hierarchy")


# Circle plot show pathway  圆圈图
par(mfrow=c(1,2))
netVisual_aggregate(cellchat_l, signaling = pathways.show, layout = "circle")
netVisual_aggregate(cellchat_l, signaling = pathways.show, layout = "circle",label.edge= T)

ggsave('./outplot/cellchat_high.pdf',width = 10,height = 5)


##热图
par(mfrow=c(1,1))
netVisual_heatmap(cellchat_l, signaling = pathways.show, color.heatmap = "Reds")

#cellchat_l<-cellchat
